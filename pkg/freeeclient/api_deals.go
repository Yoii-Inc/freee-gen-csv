/*
freee API

 <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/Yoii-Inc/freee-gen-csv

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DealsApiService DealsApi service
type DealsApiService service

type ApiCreateDealRequest struct {
	ctx context.Context
	ApiService *DealsApiService
	dealCreateParams *DealCreateParams
}

// 取引（収入／支出）の作成
func (r ApiCreateDealRequest) DealCreateParams(dealCreateParams DealCreateParams) ApiCreateDealRequest {
	r.dealCreateParams = &dealCreateParams
	return r
}

func (r ApiCreateDealRequest) Execute() (*DealCreateResponse, *http.Response, error) {
	return r.ApiService.CreateDealExecute(r)
}

/*
CreateDeal 取引（収入／支出）の作成

<h2 id="">概要</h2>
<p>指定した事業所の取引（収入／支出）を作成する</p>
<h2 id="_2">定義</h2>
<ul>
<li>
<p>issue_date : 発生日</p>
</li>
<li>
<p>due_date : 支払期日</p>
</li>
<li>
<p>amount : 金額</p>
</li>
<li>
<p>due_amount : 支払残額</p>
</li>
<li>
<p>type</p>
<ul>
<li>income : 収入</li>
<li>expense : 支出</li>
</ul>
</li>
<li>
<p>ref_number : 管理番号</p>
</li>
<li>
<p>details : 取引の明細行(最大40行)</p>
</li>
<li>
<p>payments : 取引の支払行</p>
</li>
<li>
<p>receipt_ids : 証憑ファイルID（ファイルボックスのファイルID）</p>
</li>
<li>
<p>from_walletable_type</p>
<ul>
<li>bank_account : 銀行口座</li>
<li>credit_card : クレジットカード</li>
<li>wallet : 現金</li>
<li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
</ul>
</li>
</ul>
<h2 id="_3">注意点</h2>
<ul>
    <li><p>本APIでは+更新行(renews)の操作ができません。+更新行の作成APIをご利用ください。</p></li>
    <li><p>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</p></li>
    <li>
        <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</p></li>
    <li>
        <p>本APIでは取引の明細行(details)は、最大40行までになります。</p>
    </li>
</ul>


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDealRequest
*/
func (a *DealsApiService) CreateDeal(ctx context.Context) ApiCreateDealRequest {
	return ApiCreateDealRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DealCreateResponse
func (a *DealsApiService) CreateDealExecute(r ApiCreateDealRequest) (*DealCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealsApiService.CreateDeal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/deals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealCreateParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDestroyDealRequest struct {
	ctx context.Context
	ApiService *DealsApiService
	id int64
	companyId *int64
}

// 事業所ID
func (r ApiDestroyDealRequest) CompanyId(companyId int64) ApiDestroyDealRequest {
	r.companyId = &companyId
	return r
}

func (r ApiDestroyDealRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyDealExecute(r)
}

/*
DestroyDeal 取引（収入／支出）の削除

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 取引ID
 @return ApiDestroyDealRequest
*/
func (a *DealsApiService) DestroyDeal(ctx context.Context, id int64) ApiDestroyDealRequest {
	return ApiDestroyDealRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DealsApiService) DestroyDealExecute(r ApiDestroyDealRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealsApiService.DestroyDeal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/deals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return nil, reportError("id must be less than 2147483647")
	}
	if r.companyId == nil {
		return nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDealRequest struct {
	ctx context.Context
	ApiService *DealsApiService
	companyId *int64
	id int64
	accruals *string
}

// 事業所ID
func (r ApiGetDealRequest) CompanyId(companyId int64) ApiGetDealRequest {
	r.companyId = &companyId
	return r
}

// 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）
func (r ApiGetDealRequest) Accruals(accruals string) ApiGetDealRequest {
	r.accruals = &accruals
	return r
}

func (r ApiGetDealRequest) Execute() (*DealResponse, *http.Response, error) {
	return r.ApiService.GetDealExecute(r)
}

/*
GetDeal 取引（収入／支出）の取得

<h2 id="">概要</h2>
<p>指定した事業所の取引（収入／支出）を取得する</p>
<h2 id="_2">定義</h2>
<ul>
<li>
<p>issue_date : 発生日</p>
</li>
<li>
<p>due_date : 支払期日</p>
</li>
<li>
<p>amount : 金額</p>
</li>
<li>
<p>due_amount : 支払残額</p>
</li>
<li>
<p>type</p>
<ul>
<li>income : 収入</li>
<li>expense : 支出</li>
</ul>
</li>
<li>
<p>details : 取引の明細行</p>
</li>
<li>
<p>accruals : 取引の債権債務行</p>
</li>
<li>
<p>renews : 取引の+更新行</p>
</li>
<li>
<p>payments : 取引の支払行</p>
</li>
<li>
<p>from_walletable_type</p>
<ul>
<li>bank_account : 銀行口座</li>
<li>credit_card : クレジットカード</li>
<li>wallet : 現金</li>
<li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
</ul>
</li>
<li>
<p>registered_from</p>
<ul>
<li>all : すべての取引</li>
<li>me : 自身が登録した取引</li>
</ul>
</li>
</ul>
<h2 id="_3">注意点</h2>
<ul>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
</ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetDealRequest
*/
func (a *DealsApiService) GetDeal(ctx context.Context, id int64) ApiGetDealRequest {
	return ApiGetDealRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DealResponse
func (a *DealsApiService) GetDealExecute(r ApiGetDealRequest) (*DealResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealsApiService.GetDeal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/deals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return localVarReturnValue, nil, reportError("id must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.accruals != nil {
		localVarQueryParams.Add("accruals", parameterToString(*r.accruals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDealsRequest struct {
	ctx context.Context
	ApiService *DealsApiService
	companyId *int64
	partnerId *int64
	accountItemId *int64
	partnerCode *string
	status *string
	type_ *string
	startIssueDate *string
	endIssueDate *string
	startDueDate *string
	endDueDate *string
	startRenewDate *string
	endRenewDate *string
	offset *int64
	limit *int64
	registeredFrom *string
	accruals *string
}

// 事業所ID
func (r ApiGetDealsRequest) CompanyId(companyId int64) ApiGetDealsRequest {
	r.companyId = &companyId
	return r
}

// 取引先IDで絞込
func (r ApiGetDealsRequest) PartnerId(partnerId int64) ApiGetDealsRequest {
	r.partnerId = &partnerId
	return r
}

// 勘定科目IDで絞込
func (r ApiGetDealsRequest) AccountItemId(accountItemId int64) ApiGetDealsRequest {
	r.accountItemId = &accountItemId
	return r
}

// 取引先コードで絞込
func (r ApiGetDealsRequest) PartnerCode(partnerCode string) ApiGetDealsRequest {
	r.partnerCode = &partnerCode
	return r
}

// 決済状況で絞込 (未決済: unsettled, 完了: settled)
func (r ApiGetDealsRequest) Status(status string) ApiGetDealsRequest {
	r.status = &status
	return r
}

// 収支区分 (収入: income, 支出: expense)
func (r ApiGetDealsRequest) Type_(type_ string) ApiGetDealsRequest {
	r.type_ = &type_
	return r
}

// 発生日で絞込：開始日(yyyy-mm-dd)
func (r ApiGetDealsRequest) StartIssueDate(startIssueDate string) ApiGetDealsRequest {
	r.startIssueDate = &startIssueDate
	return r
}

// 発生日で絞込：終了日(yyyy-mm-dd)
func (r ApiGetDealsRequest) EndIssueDate(endIssueDate string) ApiGetDealsRequest {
	r.endIssueDate = &endIssueDate
	return r
}

// 支払期日で絞込：開始日(yyyy-mm-dd)
func (r ApiGetDealsRequest) StartDueDate(startDueDate string) ApiGetDealsRequest {
	r.startDueDate = &startDueDate
	return r
}

// 支払期日で絞込：終了日(yyyy-mm-dd)
func (r ApiGetDealsRequest) EndDueDate(endDueDate string) ApiGetDealsRequest {
	r.endDueDate = &endDueDate
	return r
}

// +更新日で絞込：開始日(yyyy-mm-dd)
func (r ApiGetDealsRequest) StartRenewDate(startRenewDate string) ApiGetDealsRequest {
	r.startRenewDate = &startRenewDate
	return r
}

// +更新日で絞込：終了日(yyyy-mm-dd)
func (r ApiGetDealsRequest) EndRenewDate(endRenewDate string) ApiGetDealsRequest {
	r.endRenewDate = &endRenewDate
	return r
}

// 取得レコードのオフセット (デフォルト: 0)
func (r ApiGetDealsRequest) Offset(offset int64) ApiGetDealsRequest {
	r.offset = &offset
	return r
}

// 取得レコードの件数 (デフォルト: 20, 最大: 100) 
func (r ApiGetDealsRequest) Limit(limit int64) ApiGetDealsRequest {
	r.limit = &limit
	return r
}

// 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）
func (r ApiGetDealsRequest) RegisteredFrom(registeredFrom string) ApiGetDealsRequest {
	r.registeredFrom = &registeredFrom
	return r
}

// 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）
func (r ApiGetDealsRequest) Accruals(accruals string) ApiGetDealsRequest {
	r.accruals = &accruals
	return r
}

func (r ApiGetDealsRequest) Execute() (*GetDeals200Response, *http.Response, error) {
	return r.ApiService.GetDealsExecute(r)
}

/*
GetDeals 取引（収入／支出）一覧の取得

<h2 id="">概要</h2>
<p>指定した事業所の取引一覧（収入／支出）を取得する</p>
<h2 id="_2">定義</h2>
<ul>
<li>
<p>issue_date : 発生日</p>
</li>
<li>
<p>due_date : 支払期日</p>
</li>
<li>
<p>amount : 金額</p>
</li>
<li>
<p>due_amount : 支払残額</p>
</li>
<li>
<p>type</p>
<ul>
<li>income : 収入</li>
<li>expense : 支出</li>
</ul>
</li>
<li>
<p>details : 取引の明細行</p>
</li>
<li>
<p>accruals : 取引の債権債務行</p>
</li>
<li>
<p>renews : 取引の+更新行</p>
</li>
<li>
<p>payments : 取引の支払行</p>
</li>
<li>
<p>from_walletable_type</p>
<ul>
<li>bank_account : 銀行口座</li>
<li>credit_card : クレジットカード</li>
<li>wallet : 現金</li>
<li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
</ul>
</li>
<li>
<p>registered_from</p>
<ul>
<li>all : すべての取引</li>
<li>me : 自身が登録した取引</li>
</ul>
</li>
</ul>
<h2 id="_3">注意点</h2>
<ul>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
<li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li>
</ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDealsRequest
*/
func (a *DealsApiService) GetDeals(ctx context.Context) ApiGetDealsRequest {
	return ApiGetDealsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetDeals200Response
func (a *DealsApiService) GetDealsExecute(r ApiGetDealsRequest) (*GetDeals200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetDeals200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealsApiService.GetDeals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/deals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.accountItemId != nil {
		localVarQueryParams.Add("account_item_id", parameterToString(*r.accountItemId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.startIssueDate != nil {
		localVarQueryParams.Add("start_issue_date", parameterToString(*r.startIssueDate, ""))
	}
	if r.endIssueDate != nil {
		localVarQueryParams.Add("end_issue_date", parameterToString(*r.endIssueDate, ""))
	}
	if r.startDueDate != nil {
		localVarQueryParams.Add("start_due_date", parameterToString(*r.startDueDate, ""))
	}
	if r.endDueDate != nil {
		localVarQueryParams.Add("end_due_date", parameterToString(*r.endDueDate, ""))
	}
	if r.startRenewDate != nil {
		localVarQueryParams.Add("start_renew_date", parameterToString(*r.startRenewDate, ""))
	}
	if r.endRenewDate != nil {
		localVarQueryParams.Add("end_renew_date", parameterToString(*r.endRenewDate, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.registeredFrom != nil {
		localVarQueryParams.Add("registered_from", parameterToString(*r.registeredFrom, ""))
	}
	if r.accruals != nil {
		localVarQueryParams.Add("accruals", parameterToString(*r.accruals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDealRequest struct {
	ctx context.Context
	ApiService *DealsApiService
	id int64
	dealUpdateParams *DealUpdateParams
}

// 取引（収入／支出）の更新
func (r ApiUpdateDealRequest) DealUpdateParams(dealUpdateParams DealUpdateParams) ApiUpdateDealRequest {
	r.dealUpdateParams = &dealUpdateParams
	return r
}

func (r ApiUpdateDealRequest) Execute() (*DealResponse, *http.Response, error) {
	return r.ApiService.UpdateDealExecute(r)
}

/*
UpdateDeal 取引（収入／支出）の更新

<h2 id="">概要</h2>
<p>指定した事業所の取引（収入／支出）を更新する</p>
<h2 id="_2">定義</h2>
<ul>
<li>
<p>issue_date : 発生日</p>
</li>
<li>
<p>due_date : 支払期日</p>
</li>
<li>
<p>amount : 金額</p>
</li>
<li>
<p>due_amount : 支払残額</p>
</li>
<li>
<p>type</p>
<ul>
<li>income : 収入</li>
<li>expense : 支出</li>
</ul>
</li>
<li>
<p>details : 取引の明細行(最大40行)</p>
</li>
<li>
<p>renews : 取引の+更新行</p>
</li>
<li>
<p>payments : 取引の支払行</p>
</li>
<li>
<p>from_walletable_type</p>
<ul>
<li>bank_account : 銀行口座</li>
<li>credit_card : クレジットカード</li>
<li>wallet : 現金</li>
<li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
</ul>
</li>
<li>
<p>receipt_ids : 証憑ファイルID（ファイルボックスのファイルID）</p>
</li>
</ul>
<h2 id="_3">注意点</h2>
<ul>
    <li><p>本APIでは支払行(payments)の操作ができません。支払行の作成・更新・削除APIをご利用ください。</p></li>
    <li><p>本APIでは+更新行(renews)の操作ができません。+更新行の作成・更新・削除APIをご利用ください。</p></li>
    <li><p>本APIでは収入／支出の切替えができません。既存の取引を削除後、再度作成してください。</p></li>
    <li><p>本APIで取引を更新すると、消費税の計算方法は必ず内税方式が選択されます。</p></li>
    <li><p>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</p></li>
    <li><p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</p></li>
    <li>
        <p>本APIでは取引の明細行(details)は、最大40行までになります。</p>
    </li>
</ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id 取引ID
 @return ApiUpdateDealRequest
*/
func (a *DealsApiService) UpdateDeal(ctx context.Context, id int64) ApiUpdateDealRequest {
	return ApiUpdateDealRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DealResponse
func (a *DealsApiService) UpdateDealExecute(r ApiUpdateDealRequest) (*DealResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealsApiService.UpdateDeal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/deals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return localVarReturnValue, nil, reportError("id must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealUpdateParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
