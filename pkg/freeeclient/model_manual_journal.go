/*
freee API

 <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/Yoii-Inc/freee-gen-csv

import (
	"encoding/json"
)

// ManualJournal struct for ManualJournal
type ManualJournal struct {
	// 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳）
	Adjustment bool `json:"adjustment"`
	// 事業所ID
	CompanyId int64 `json:"company_id"`
	// 貸借行一覧（配列）: 貸借合わせて100行まで登録できます。
	Details []ManualJournalDetailsInner `json:"details"`
	// 振替伝票ID
	Id int64 `json:"id"`
	// 発生日 (yyyy-mm-dd)
	IssueDate string `json:"issue_date"`
	// 証憑ファイルID（ファイルボックスのファイルID）
	ReceiptIds []int64 `json:"receipt_ids,omitempty"`
	// 仕訳番号
	TxnNumber NullableString `json:"txn_number"`
}

// NewManualJournal instantiates a new ManualJournal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualJournal(adjustment bool, companyId int64, details []ManualJournalDetailsInner, id int64, issueDate string, txnNumber NullableString) *ManualJournal {
	this := ManualJournal{}
	this.Adjustment = adjustment
	this.CompanyId = companyId
	this.Details = details
	this.Id = id
	this.IssueDate = issueDate
	this.TxnNumber = txnNumber
	return &this
}

// NewManualJournalWithDefaults instantiates a new ManualJournal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualJournalWithDefaults() *ManualJournal {
	this := ManualJournal{}
	return &this
}

// GetAdjustment returns the Adjustment field value
func (o *ManualJournal) GetAdjustment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Adjustment
}

// GetAdjustmentOk returns a tuple with the Adjustment field value
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetAdjustmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Adjustment, true
}

// SetAdjustment sets field value
func (o *ManualJournal) SetAdjustment(v bool) {
	o.Adjustment = v
}

// GetCompanyId returns the CompanyId field value
func (o *ManualJournal) GetCompanyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetCompanyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *ManualJournal) SetCompanyId(v int64) {
	o.CompanyId = v
}

// GetDetails returns the Details field value
func (o *ManualJournal) GetDetails() []ManualJournalDetailsInner {
	if o == nil {
		var ret []ManualJournalDetailsInner
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetDetailsOk() ([]ManualJournalDetailsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Details, true
}

// SetDetails sets field value
func (o *ManualJournal) SetDetails(v []ManualJournalDetailsInner) {
	o.Details = v
}

// GetId returns the Id field value
func (o *ManualJournal) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ManualJournal) SetId(v int64) {
	o.Id = v
}

// GetIssueDate returns the IssueDate field value
func (o *ManualJournal) GetIssueDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetIssueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueDate, true
}

// SetIssueDate sets field value
func (o *ManualJournal) SetIssueDate(v string) {
	o.IssueDate = v
}

// GetReceiptIds returns the ReceiptIds field value if set, zero value otherwise.
func (o *ManualJournal) GetReceiptIds() []int64 {
	if o == nil || o.ReceiptIds == nil {
		var ret []int64
		return ret
	}
	return o.ReceiptIds
}

// GetReceiptIdsOk returns a tuple with the ReceiptIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualJournal) GetReceiptIdsOk() ([]int64, bool) {
	if o == nil || o.ReceiptIds == nil {
		return nil, false
	}
	return o.ReceiptIds, true
}

// HasReceiptIds returns a boolean if a field has been set.
func (o *ManualJournal) HasReceiptIds() bool {
	if o != nil && o.ReceiptIds != nil {
		return true
	}

	return false
}

// SetReceiptIds gets a reference to the given []int64 and assigns it to the ReceiptIds field.
func (o *ManualJournal) SetReceiptIds(v []int64) {
	o.ReceiptIds = v
}

// GetTxnNumber returns the TxnNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ManualJournal) GetTxnNumber() string {
	if o == nil || o.TxnNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.TxnNumber.Get()
}

// GetTxnNumberOk returns a tuple with the TxnNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualJournal) GetTxnNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxnNumber.Get(), o.TxnNumber.IsSet()
}

// SetTxnNumber sets field value
func (o *ManualJournal) SetTxnNumber(v string) {
	o.TxnNumber.Set(&v)
}

func (o ManualJournal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["adjustment"] = o.Adjustment
	}
	if true {
		toSerialize["company_id"] = o.CompanyId
	}
	if true {
		toSerialize["details"] = o.Details
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["issue_date"] = o.IssueDate
	}
	if o.ReceiptIds != nil {
		toSerialize["receipt_ids"] = o.ReceiptIds
	}
	if true {
		toSerialize["txn_number"] = o.TxnNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableManualJournal struct {
	value *ManualJournal
	isSet bool
}

func (v NullableManualJournal) Get() *ManualJournal {
	return v.value
}

func (v *NullableManualJournal) Set(val *ManualJournal) {
	v.value = val
	v.isSet = true
}

func (v NullableManualJournal) IsSet() bool {
	return v.isSet
}

func (v *NullableManualJournal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualJournal(val *ManualJournal) *NullableManualJournal {
	return &NullableManualJournal{value: val, isSet: true}
}

func (v NullableManualJournal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualJournal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


