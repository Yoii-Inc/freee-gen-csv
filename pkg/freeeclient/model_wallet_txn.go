/*
freee API

 <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WalletTxn struct for WalletTxn
type WalletTxn struct {
	// 取引金額
	Amount int64 `json:"amount"`
	// 残高(銀行口座等)
	Balance int32 `json:"balance"`
	// 事業所ID
	CompanyId int32 `json:"company_id"`
	// 取引日(yyyy-mm-dd)
	Date string `json:"date"`
	// 取引内容
	Description string `json:"description"`
	// 未決済金額
	DueAmount int32 `json:"due_amount"`
	// 入金／出金 (入金: income, 出金: expense)
	EntrySide string `json:"entry_side"`
	// 明細ID
	Id int32 `json:"id"`
	// 登録時に<a href=\"https://support.freee.co.jp/hc/ja/articles/202848350-明細の自動登録ルールを設定する\" target=\"_blank\">自動登録ルールの設定</a>が適用され、登録処理が実行された場合、 trueになります。〜を推測する、〜の消込をするの条件の場合は一致してもfalseになります。 
	RuleMatched bool `json:"rule_matched"`
	// 明細のステータス（消込待ち: 1, 消込済み: 2, 無視: 3, 消込中: 4, 対象外: 6）
	Status int32 `json:"status"`
	// 口座ID
	WalletableId int32 `json:"walletable_id"`
	// 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
	WalletableType string `json:"walletable_type"`
}

// NewWalletTxn instantiates a new WalletTxn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTxn(amount int64, balance int32, companyId int32, date string, description string, dueAmount int32, entrySide string, id int32, ruleMatched bool, status int32, walletableId int32, walletableType string) *WalletTxn {
	this := WalletTxn{}
	this.Amount = amount
	this.Balance = balance
	this.CompanyId = companyId
	this.Date = date
	this.Description = description
	this.DueAmount = dueAmount
	this.EntrySide = entrySide
	this.Id = id
	this.RuleMatched = ruleMatched
	this.Status = status
	this.WalletableId = walletableId
	this.WalletableType = walletableType
	return &this
}

// NewWalletTxnWithDefaults instantiates a new WalletTxn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTxnWithDefaults() *WalletTxn {
	this := WalletTxn{}
	return &this
}

// GetAmount returns the Amount field value
func (o *WalletTxn) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WalletTxn) SetAmount(v int64) {
	o.Amount = v
}

// GetBalance returns the Balance field value
func (o *WalletTxn) GetBalance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetBalanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *WalletTxn) SetBalance(v int32) {
	o.Balance = v
}

// GetCompanyId returns the CompanyId field value
func (o *WalletTxn) GetCompanyId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetCompanyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *WalletTxn) SetCompanyId(v int32) {
	o.CompanyId = v
}

// GetDate returns the Date field value
func (o *WalletTxn) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *WalletTxn) SetDate(v string) {
	o.Date = v
}

// GetDescription returns the Description field value
func (o *WalletTxn) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WalletTxn) SetDescription(v string) {
	o.Description = v
}

// GetDueAmount returns the DueAmount field value
func (o *WalletTxn) GetDueAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DueAmount
}

// GetDueAmountOk returns a tuple with the DueAmount field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetDueAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueAmount, true
}

// SetDueAmount sets field value
func (o *WalletTxn) SetDueAmount(v int32) {
	o.DueAmount = v
}

// GetEntrySide returns the EntrySide field value
func (o *WalletTxn) GetEntrySide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntrySide
}

// GetEntrySideOk returns a tuple with the EntrySide field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetEntrySideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntrySide, true
}

// SetEntrySide sets field value
func (o *WalletTxn) SetEntrySide(v string) {
	o.EntrySide = v
}

// GetId returns the Id field value
func (o *WalletTxn) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WalletTxn) SetId(v int32) {
	o.Id = v
}

// GetRuleMatched returns the RuleMatched field value
func (o *WalletTxn) GetRuleMatched() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RuleMatched
}

// GetRuleMatchedOk returns a tuple with the RuleMatched field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetRuleMatchedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleMatched, true
}

// SetRuleMatched sets field value
func (o *WalletTxn) SetRuleMatched(v bool) {
	o.RuleMatched = v
}

// GetStatus returns the Status field value
func (o *WalletTxn) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WalletTxn) SetStatus(v int32) {
	o.Status = v
}

// GetWalletableId returns the WalletableId field value
func (o *WalletTxn) GetWalletableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WalletableId
}

// GetWalletableIdOk returns a tuple with the WalletableId field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetWalletableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletableId, true
}

// SetWalletableId sets field value
func (o *WalletTxn) SetWalletableId(v int32) {
	o.WalletableId = v
}

// GetWalletableType returns the WalletableType field value
func (o *WalletTxn) GetWalletableType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletableType
}

// GetWalletableTypeOk returns a tuple with the WalletableType field value
// and a boolean to check if the value has been set.
func (o *WalletTxn) GetWalletableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletableType, true
}

// SetWalletableType sets field value
func (o *WalletTxn) SetWalletableType(v string) {
	o.WalletableType = v
}

func (o WalletTxn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["company_id"] = o.CompanyId
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["due_amount"] = o.DueAmount
	}
	if true {
		toSerialize["entry_side"] = o.EntrySide
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["rule_matched"] = o.RuleMatched
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["walletable_id"] = o.WalletableId
	}
	if true {
		toSerialize["walletable_type"] = o.WalletableType
	}
	return json.Marshal(toSerialize)
}

type NullableWalletTxn struct {
	value *WalletTxn
	isSet bool
}

func (v NullableWalletTxn) Get() *WalletTxn {
	return v.value
}

func (v *NullableWalletTxn) Set(val *WalletTxn) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTxn) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTxn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTxn(val *WalletTxn) *NullableWalletTxn {
	return &NullableWalletTxn{value: val, isSet: true}
}

func (v NullableWalletTxn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTxn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


