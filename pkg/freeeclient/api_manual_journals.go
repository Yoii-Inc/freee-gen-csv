/*
freee API

 <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManualJournalsApiService ManualJournalsApi service
type ManualJournalsApiService service

type ApiCreateManualJournalRequest struct {
	ctx context.Context
	ApiService *ManualJournalsApiService
	manualJournalCreateParams *ManualJournalCreateParams
}

// 振替伝票の作成
func (r ApiCreateManualJournalRequest) ManualJournalCreateParams(manualJournalCreateParams ManualJournalCreateParams) ApiCreateManualJournalRequest {
	r.manualJournalCreateParams = &manualJournalCreateParams
	return r
}

func (r ApiCreateManualJournalRequest) Execute() (*ManualJournalResponse, *http.Response, error) {
	return r.ApiService.CreateManualJournalExecute(r)
}

/*
CreateManualJournal 振替伝票の作成


<h2 id="">概要</h2>

<p>指定した事業所の振替伝票を作成する</p>

<h2 id="_2">定義</h2>

<ul>
<li>
<p>issue_date : 発生日</p>
</li>

<li>
<p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
</li>

<li>
<p>txn_number : 仕訳番号</p>
</li>

<li>
<p>details : 振替伝票の貸借行</p>
</li>

<li>
<p>entry_side : 貸借区分</p>

<ul>
<li>credit : 貸方</li>

<li>debit : 借方</li>
</ul>
</li>

<li>
<p>amount : 金額</p>
</li>
</ul>

<h2 id="_3">注意点</h2>

<ul>
<li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
<li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
<li>貸借合わせて100行まで仕訳行を登録できます。</li>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
<li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateManualJournalRequest
*/
func (a *ManualJournalsApiService) CreateManualJournal(ctx context.Context) ApiCreateManualJournalRequest {
	return ApiCreateManualJournalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ManualJournalResponse
func (a *ManualJournalsApiService) CreateManualJournalExecute(r ApiCreateManualJournalRequest) (*ManualJournalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManualJournalResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualJournalsApiService.CreateManualJournal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/manual_journals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manualJournalCreateParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ServiceUnavailableError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDestroyManualJournalRequest struct {
	ctx context.Context
	ApiService *ManualJournalsApiService
	id int64
	companyId *int64
}

// 事業所ID
func (r ApiDestroyManualJournalRequest) CompanyId(companyId int64) ApiDestroyManualJournalRequest {
	r.companyId = &companyId
	return r
}

func (r ApiDestroyManualJournalRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyManualJournalExecute(r)
}

/*
DestroyManualJournal 振替伝票の削除


<h2 id="">概要</h2>

<p>指定した事業所の振替伝票を削除する</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDestroyManualJournalRequest
*/
func (a *ManualJournalsApiService) DestroyManualJournal(ctx context.Context, id int64) ApiDestroyManualJournalRequest {
	return ApiDestroyManualJournalRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ManualJournalsApiService) DestroyManualJournalExecute(r ApiDestroyManualJournalRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualJournalsApiService.DestroyManualJournal")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/manual_journals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return nil, reportError("id must be less than 2147483647")
	}
	if r.companyId == nil {
		return nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetManualJournalRequest struct {
	ctx context.Context
	ApiService *ManualJournalsApiService
	companyId *int64
	id int64
}

// 事業所ID
func (r ApiGetManualJournalRequest) CompanyId(companyId int64) ApiGetManualJournalRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGetManualJournalRequest) Execute() (*ManualJournalResponse, *http.Response, error) {
	return r.ApiService.GetManualJournalExecute(r)
}

/*
GetManualJournal 振替伝票の取得


<h2 id="">概要</h2>

<p>指定した事業所の振替伝票を取得する</p>

<h2 id="_2">定義</h2>

<ul> <li> <p>issue_date : 発生日</p> </li>
<li> <p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p> </li>
<li> <p>txn_number : 仕訳番号</p> </li>
<li> <p>details : 振替伝票の貸借行</p> </li>
<li> <p>entry_side : 貸借区分</p>
<ul> <li>credit : 貸方</li>
<li>debit : 借方</li> </ul> </li>
<li> <p>amount : 金額</p> </li> </ul>

<h2 id="_3">注意点</h2>

<ul>
<li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
<li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
</ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetManualJournalRequest
*/
func (a *ManualJournalsApiService) GetManualJournal(ctx context.Context, id int64) ApiGetManualJournalRequest {
	return ApiGetManualJournalRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManualJournalResponse
func (a *ManualJournalsApiService) GetManualJournalExecute(r ApiGetManualJournalRequest) (*ManualJournalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManualJournalResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualJournalsApiService.GetManualJournal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/manual_journals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return localVarReturnValue, nil, reportError("id must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetManualJournalsRequest struct {
	ctx context.Context
	ApiService *ManualJournalsApiService
	companyId *int64
	startIssueDate *string
	endIssueDate *string
	entrySide *string
	accountItemId *int64
	minAmount *int64
	maxAmount *int64
	partnerId *int64
	partnerCode *string
	itemId *int64
	sectionId *int64
	segment1TagId *int64
	segment2TagId *int64
	segment3TagId *int64
	commentStatus *string
	commentImportant *bool
	adjustment *string
	txnNumber *string
	offset *int64
	limit *int64
}

// 事業所ID
func (r ApiGetManualJournalsRequest) CompanyId(companyId int64) ApiGetManualJournalsRequest {
	r.companyId = &companyId
	return r
}

// 発生日で絞込：開始日(yyyy-mm-dd)
func (r ApiGetManualJournalsRequest) StartIssueDate(startIssueDate string) ApiGetManualJournalsRequest {
	r.startIssueDate = &startIssueDate
	return r
}

// 発生日で絞込：終了日(yyyy-mm-dd)
func (r ApiGetManualJournalsRequest) EndIssueDate(endIssueDate string) ApiGetManualJournalsRequest {
	r.endIssueDate = &endIssueDate
	return r
}

// 貸借で絞込 (貸方: credit, 借方: debit)
func (r ApiGetManualJournalsRequest) EntrySide(entrySide string) ApiGetManualJournalsRequest {
	r.entrySide = &entrySide
	return r
}

// 勘定科目IDで絞込
func (r ApiGetManualJournalsRequest) AccountItemId(accountItemId int64) ApiGetManualJournalsRequest {
	r.accountItemId = &accountItemId
	return r
}

// 金額で絞込：下限
func (r ApiGetManualJournalsRequest) MinAmount(minAmount int64) ApiGetManualJournalsRequest {
	r.minAmount = &minAmount
	return r
}

// 金額で絞込：上限
func (r ApiGetManualJournalsRequest) MaxAmount(maxAmount int64) ApiGetManualJournalsRequest {
	r.maxAmount = &maxAmount
	return r
}

// 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) PartnerId(partnerId int64) ApiGetManualJournalsRequest {
	r.partnerId = &partnerId
	return r
}

// 取引先コードで絞込
func (r ApiGetManualJournalsRequest) PartnerCode(partnerCode string) ApiGetManualJournalsRequest {
	r.partnerCode = &partnerCode
	return r
}

// 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) ItemId(itemId int64) ApiGetManualJournalsRequest {
	r.itemId = &itemId
	return r
}

// 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) SectionId(sectionId int64) ApiGetManualJournalsRequest {
	r.sectionId = &sectionId
	return r
}

// セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) Segment1TagId(segment1TagId int64) ApiGetManualJournalsRequest {
	r.segment1TagId = &segment1TagId
	return r
}

// セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) Segment2TagId(segment2TagId int64) ApiGetManualJournalsRequest {
	r.segment2TagId = &segment2TagId
	return r
}

// セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
func (r ApiGetManualJournalsRequest) Segment3TagId(segment3TagId int64) ApiGetManualJournalsRequest {
	r.segment3TagId = &segment3TagId
	return r
}

// コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none）
func (r ApiGetManualJournalsRequest) CommentStatus(commentStatus string) ApiGetManualJournalsRequest {
	r.commentStatus = &commentStatus
	return r
}

// 重要コメント付きの振替伝票を絞込
func (r ApiGetManualJournalsRequest) CommentImportant(commentImportant bool) ApiGetManualJournalsRequest {
	r.commentImportant = &commentImportant
	return r
}

// 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
func (r ApiGetManualJournalsRequest) Adjustment(adjustment string) ApiGetManualJournalsRequest {
	r.adjustment = &adjustment
	return r
}

// 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
func (r ApiGetManualJournalsRequest) TxnNumber(txnNumber string) ApiGetManualJournalsRequest {
	r.txnNumber = &txnNumber
	return r
}

// 取得レコードのオフセット (デフォルト: 0)
func (r ApiGetManualJournalsRequest) Offset(offset int64) ApiGetManualJournalsRequest {
	r.offset = &offset
	return r
}

// 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500) 
func (r ApiGetManualJournalsRequest) Limit(limit int64) ApiGetManualJournalsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetManualJournalsRequest) Execute() (*GetManualJournals200Response, *http.Response, error) {
	return r.ApiService.GetManualJournalsExecute(r)
}

/*
GetManualJournals 振替伝票一覧の取得


<h2 id="">概要</h2>

<p>指定した事業所の振替伝票一覧を取得する</p>

<h2 id="_2">定義</h2>

<ul>
<li>
<p>issue_date : 発生日</p>
</li>

<li>
<p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
</li>

<li>
<p>txn_number : 仕訳番号</p>
</li>

<li>
<p>details : 振替伝票の貸借行</p>
</li>

<li>
<p>entry_side : 貸借区分</p>

<ul>
<li>credit : 貸方</li>

<li>debit : 借方</li>
</ul>
</li>

<li>
<p>amount : 金額</p>
</li>
</ul>

<h2 id="_3">注意点</h2>

<ul>
<li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
<li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
<li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetManualJournalsRequest
*/
func (a *ManualJournalsApiService) GetManualJournals(ctx context.Context) ApiGetManualJournalsRequest {
	return ApiGetManualJournalsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetManualJournals200Response
func (a *ManualJournalsApiService) GetManualJournalsExecute(r ApiGetManualJournalsRequest) (*GetManualJournals200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetManualJournals200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualJournalsApiService.GetManualJournals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/manual_journals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.startIssueDate != nil {
		localVarQueryParams.Add("start_issue_date", parameterToString(*r.startIssueDate, ""))
	}
	if r.endIssueDate != nil {
		localVarQueryParams.Add("end_issue_date", parameterToString(*r.endIssueDate, ""))
	}
	if r.entrySide != nil {
		localVarQueryParams.Add("entry_side", parameterToString(*r.entrySide, ""))
	}
	if r.accountItemId != nil {
		localVarQueryParams.Add("account_item_id", parameterToString(*r.accountItemId, ""))
	}
	if r.minAmount != nil {
		localVarQueryParams.Add("min_amount", parameterToString(*r.minAmount, ""))
	}
	if r.maxAmount != nil {
		localVarQueryParams.Add("max_amount", parameterToString(*r.maxAmount, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.sectionId != nil {
		localVarQueryParams.Add("section_id", parameterToString(*r.sectionId, ""))
	}
	if r.segment1TagId != nil {
		localVarQueryParams.Add("segment_1_tag_id", parameterToString(*r.segment1TagId, ""))
	}
	if r.segment2TagId != nil {
		localVarQueryParams.Add("segment_2_tag_id", parameterToString(*r.segment2TagId, ""))
	}
	if r.segment3TagId != nil {
		localVarQueryParams.Add("segment_3_tag_id", parameterToString(*r.segment3TagId, ""))
	}
	if r.commentStatus != nil {
		localVarQueryParams.Add("comment_status", parameterToString(*r.commentStatus, ""))
	}
	if r.commentImportant != nil {
		localVarQueryParams.Add("comment_important", parameterToString(*r.commentImportant, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	if r.txnNumber != nil {
		localVarQueryParams.Add("txn_number", parameterToString(*r.txnNumber, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManualJournalRequest struct {
	ctx context.Context
	ApiService *ManualJournalsApiService
	id int64
	manualJournalUpdateParams *ManualJournalUpdateParams
}

// 振替伝票の更新
func (r ApiUpdateManualJournalRequest) ManualJournalUpdateParams(manualJournalUpdateParams ManualJournalUpdateParams) ApiUpdateManualJournalRequest {
	r.manualJournalUpdateParams = &manualJournalUpdateParams
	return r
}

func (r ApiUpdateManualJournalRequest) Execute() (*ManualJournalResponse, *http.Response, error) {
	return r.ApiService.UpdateManualJournalExecute(r)
}

/*
UpdateManualJournal 振替伝票の更新


<h2 id="">概要</h2>

<p>指定した事業所の振替伝票を更新する</p>

<h2 id="_2">定義</h2>

<ul>
<li>
<p>issue_date : 発生日</p>
</li>

<li>
<p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
</li>

<li>
<p>txn_number : 仕訳番号</p>
</li>

<li>
<p>details : 振替伝票の貸借行</p>
</li>

<li>
<p>entry_side : 貸借区分</p>

<ul>
<li>credit : 貸方</li>

<li>debit : 借方</li>
</ul>
</li>

<li>
<p>amount : 金額</p>
</li>
</ul>

<h2 id="_3">注意点</h2>

<ul>
<li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>

<li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
<li>貸借合わせて100行まで仕訳行を登録できます。</li>

<li>detailsに含まれない既存の貸借行は削除されます。更新後も残したい行は、必ず貸借行IDを指定してdetailsに含めてください。</li>

<li>detailsに含まれる貸借行IDの指定がある行は、更新行として扱われ更新されます。</li>

<li>detailsに含まれる貸借行IDの指定がない行は、新規行として扱われ追加されます。</li>
<li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
<li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateManualJournalRequest
*/
func (a *ManualJournalsApiService) UpdateManualJournal(ctx context.Context, id int64) ApiUpdateManualJournalRequest {
	return ApiUpdateManualJournalRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManualJournalResponse
func (a *ManualJournalsApiService) UpdateManualJournalExecute(r ApiUpdateManualJournalRequest) (*ManualJournalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManualJournalResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualJournalsApiService.UpdateManualJournal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/manual_journals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return localVarReturnValue, nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return localVarReturnValue, nil, reportError("id must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manualJournalUpdateParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BadRequestNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
