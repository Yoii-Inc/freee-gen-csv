/*
freee API

 <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2019-12-17&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>freee会計プラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freeeclient

import (
	"encoding/json"
)

// Section struct for Section
type Section struct {
	// 部門の使用設定（true: 使用する、false: 使用しない） <br> <ul>   <li>     本APIでsectionを作成した場合はtrueになります。   </li>   <li>     falseにする場合はWeb画面から変更できます。   </li>   <li>     trueの場合、Web画面での取引登録時などに入力候補として表示されます。   </li>   <li>     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。   </li> </ul>
	Available bool `json:"available"`
	// 事業所ID
	CompanyId int64 `json:"company_id"`
	// 部門ID
	Id int64 `json:"id"`
	// <a target=\"_blank\" href=\"https://support.freee.co.jp/hc/ja/articles/209093566\">部門階層</a> <br> ※ indent_count が 0 のときは第一階層の親部門です。 
	IndentCount *int64 `json:"indent_count,omitempty"`
	// 正式名称（255文字以内）
	LongName NullableString `json:"long_name,omitempty"`
	// 部門名 (30文字以内)
	Name string `json:"name"`
	// <a target=\"_blank\" href=\"https://support.freee.co.jp/hc/ja/articles/209093566\">親部門ID</a> <br> ※ parent_id が null のときは第一階層の親部門です。 
	ParentId NullableInt64 `json:"parent_id,omitempty"`
	// ショートカット１ (20文字以内)
	Shortcut1 NullableString `json:"shortcut1,omitempty"`
	// ショートカット２ (20文字以内)
	Shortcut2 NullableString `json:"shortcut2,omitempty"`
}

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection(available bool, companyId int64, id int64, name string) *Section {
	this := Section{}
	this.Available = available
	this.CompanyId = companyId
	this.Id = id
	this.Name = name
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetAvailable returns the Available field value
func (o *Section) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *Section) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *Section) SetAvailable(v bool) {
	o.Available = v
}

// GetCompanyId returns the CompanyId field value
func (o *Section) GetCompanyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Section) GetCompanyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Section) SetCompanyId(v int64) {
	o.CompanyId = v
}

// GetId returns the Id field value
func (o *Section) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Section) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Section) SetId(v int64) {
	o.Id = v
}

// GetIndentCount returns the IndentCount field value if set, zero value otherwise.
func (o *Section) GetIndentCount() int64 {
	if o == nil || o.IndentCount == nil {
		var ret int64
		return ret
	}
	return *o.IndentCount
}

// GetIndentCountOk returns a tuple with the IndentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetIndentCountOk() (*int64, bool) {
	if o == nil || o.IndentCount == nil {
		return nil, false
	}
	return o.IndentCount, true
}

// HasIndentCount returns a boolean if a field has been set.
func (o *Section) HasIndentCount() bool {
	if o != nil && o.IndentCount != nil {
		return true
	}

	return false
}

// SetIndentCount gets a reference to the given int64 and assigns it to the IndentCount field.
func (o *Section) SetIndentCount(v int64) {
	o.IndentCount = &v
}

// GetLongName returns the LongName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Section) GetLongName() string {
	if o == nil || o.LongName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LongName.Get()
}

// GetLongNameOk returns a tuple with the LongName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Section) GetLongNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LongName.Get(), o.LongName.IsSet()
}

// HasLongName returns a boolean if a field has been set.
func (o *Section) HasLongName() bool {
	if o != nil && o.LongName.IsSet() {
		return true
	}

	return false
}

// SetLongName gets a reference to the given NullableString and assigns it to the LongName field.
func (o *Section) SetLongName(v string) {
	o.LongName.Set(&v)
}
// SetLongNameNil sets the value for LongName to be an explicit nil
func (o *Section) SetLongNameNil() {
	o.LongName.Set(nil)
}

// UnsetLongName ensures that no value is present for LongName, not even an explicit nil
func (o *Section) UnsetLongName() {
	o.LongName.Unset()
}

// GetName returns the Name field value
func (o *Section) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Section) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Section) SetName(v string) {
	o.Name = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Section) GetParentId() int64 {
	if o == nil || o.ParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Section) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *Section) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt64 and assigns it to the ParentId field.
func (o *Section) SetParentId(v int64) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *Section) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *Section) UnsetParentId() {
	o.ParentId.Unset()
}

// GetShortcut1 returns the Shortcut1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Section) GetShortcut1() string {
	if o == nil || o.Shortcut1.Get() == nil {
		var ret string
		return ret
	}
	return *o.Shortcut1.Get()
}

// GetShortcut1Ok returns a tuple with the Shortcut1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Section) GetShortcut1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shortcut1.Get(), o.Shortcut1.IsSet()
}

// HasShortcut1 returns a boolean if a field has been set.
func (o *Section) HasShortcut1() bool {
	if o != nil && o.Shortcut1.IsSet() {
		return true
	}

	return false
}

// SetShortcut1 gets a reference to the given NullableString and assigns it to the Shortcut1 field.
func (o *Section) SetShortcut1(v string) {
	o.Shortcut1.Set(&v)
}
// SetShortcut1Nil sets the value for Shortcut1 to be an explicit nil
func (o *Section) SetShortcut1Nil() {
	o.Shortcut1.Set(nil)
}

// UnsetShortcut1 ensures that no value is present for Shortcut1, not even an explicit nil
func (o *Section) UnsetShortcut1() {
	o.Shortcut1.Unset()
}

// GetShortcut2 returns the Shortcut2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Section) GetShortcut2() string {
	if o == nil || o.Shortcut2.Get() == nil {
		var ret string
		return ret
	}
	return *o.Shortcut2.Get()
}

// GetShortcut2Ok returns a tuple with the Shortcut2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Section) GetShortcut2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shortcut2.Get(), o.Shortcut2.IsSet()
}

// HasShortcut2 returns a boolean if a field has been set.
func (o *Section) HasShortcut2() bool {
	if o != nil && o.Shortcut2.IsSet() {
		return true
	}

	return false
}

// SetShortcut2 gets a reference to the given NullableString and assigns it to the Shortcut2 field.
func (o *Section) SetShortcut2(v string) {
	o.Shortcut2.Set(&v)
}
// SetShortcut2Nil sets the value for Shortcut2 to be an explicit nil
func (o *Section) SetShortcut2Nil() {
	o.Shortcut2.Set(nil)
}

// UnsetShortcut2 ensures that no value is present for Shortcut2, not even an explicit nil
func (o *Section) UnsetShortcut2() {
	o.Shortcut2.Unset()
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["company_id"] = o.CompanyId
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.IndentCount != nil {
		toSerialize["indent_count"] = o.IndentCount
	}
	if o.LongName.IsSet() {
		toSerialize["long_name"] = o.LongName.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	if o.Shortcut1.IsSet() {
		toSerialize["shortcut1"] = o.Shortcut1.Get()
	}
	if o.Shortcut2.IsSet() {
		toSerialize["shortcut2"] = o.Shortcut2.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


